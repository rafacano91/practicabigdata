{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark11",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3b5fae94-7d64-471b-8cc4-80241a13cfb2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f98c40cb-c627-4c43-9ac4-d10bb7b42e04/resourceGroups/RG_MASTER_OCT22_GROUP11/providers/Microsoft.Synapse/workspaces/synapsegrupo11/bigDataPools/spark11",
				"name": "spark11",
				"type": "Spark",
				"endpoint": "https://synapsegrupo11.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark11",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"\r\n",
					"# Azure storage access info\r\n",
					"blob_account_name = 'r.cano' # replace with your blob name\r\n",
					"blob_container_name = 'datalakegen2grupo11' # replace with your container name\r\n",
					"blob_relative_path = 'Your path' # replace with your relative folder path\r\n",
					"linked_service_name = 'AzureBlobStorage1' # replace with your linked service name\r\n",
					"servername = \"jdbc:sqlserver://practicabigdata.database.windows.net:1433\"\r\n",
					"dbname = \"Practica\"\r\n",
					"url = servername + \";\" + \"databaseName=\" + dbname + \";\"\r\n",
					"user = \"practicabigdata\" \r\n",
					"password = \"BigData123\"\r\n",
					"\r\n",
					"#abfss://datalakegen2grupo11@f.campos.dfs.core.windows.net/userid-profile.tsv\r\n",
					"\r\n",
					"blob_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(linked_service_name)\r\n",
					"\r\n",
					"# Allow SPARK to access from Blob remotely\r\n",
					"\r\n",
					"wasb_path = 'datalakegen2grupo11@r.cano.dfs.core.windows.net/userid-profile.tsv' # % (blob_container_name, blob_account_name, blob_relative_path)\r\n",
					"\r\n",
					"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name), blob_sas_token)\r\n",
					"print('Remote blob path: ' + wasb_path)\r\n",
					"\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"%%pyspark\r\n",
					"\"\"\"configuracion de tabla maestra primer csv\"\"\"\r\n",
					"df = spark.read.option(\"delimiter\",\"\\t\").option(\"header\",\"true\").csv(\"brutos/userid-profile.tsv\")\r\n",
					"df = df.drop(\"gender\").drop(\"age\").withColumnRenamed(\"country\",\"pais\").withColumnRenamed(\"registered\",\"registro\")\r\n",
					"\r\n",
					"dbtable = \"Usuarios\"\r\n",
					"\r\n",
					"try:\r\n",
					"  df.write \\\r\n",
					"    .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"    .mode(\"overwrite\") \\\r\n",
					"    .option(\"url\", url) \\\r\n",
					"    .option(\"dbtable\", dbtable) \\\r\n",
					"    .option(\"user\", user) \\\r\n",
					"    .option(\"password\", password) \\\r\n",
					"    .save()\r\n",
					"except ValueError as error :\r\n",
					"    print(\"MSSQL Connector write failed\", error)\r\n",
					"\r\n",
					"print(\"MSSQL Connector write(overwrite) succeeded  \")\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql.types import StructType,StructField, StringType, IntegerType\r\n",
					"\r\n",
					"\"\"\"configuracion de tabla maestra segundo csv\"\"\"    \r\n",
					"schema = StructType([ \\\r\n",
					"    StructField(\"id\",StringType(),True), \\\r\n",
					"    StructField(\"timestamp\",StringType(),True), \\\r\n",
					"    StructField(\"idArtista\",StringType(),True), \\\r\n",
					"    StructField(\"nombreArtista\", StringType(), True), \\\r\n",
					"    StructField(\"idCancion\", StringType(), True), \\\r\n",
					"    StructField(\"nombreCancion\", IntegerType(), True) \\\r\n",
					"  ])\r\n",
					"\r\n",
					"df = spark.read.schema(schema).option(\"delimiter\",\"\\t\").csv(\"brutos/userid-timestamp-artid-artname-traid-traname.tsv\")\r\n",
					"df = df.drop(\"timestamp\")\r\n",
					"\r\n",
					"dbtable = \"UsuariosCanciones\"\r\n",
					"\r\n",
					"try:\r\n",
					"  df.write \\\r\n",
					"    .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"    .mode(\"overwrite\") \\\r\n",
					"    .option(\"url\", url) \\\r\n",
					"    .option(\"dbtable\", dbtable) \\\r\n",
					"    .option(\"user\", user) \\\r\n",
					"    .option(\"password\", password) \\\r\n",
					"    .save()\r\n",
					"except ValueError as error :\r\n",
					"    print(\"MSSQL Connector write failed\", error)\r\n",
					"\r\n",
					"print(\"MSSQL Connector write(overwrite) succeeded  \")\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\"\"\"Modificacion y almancenamiento tablas: horoscopos, usuarios y paises para manejo en spark\"\"\"\r\n",
					"from datetime import datetime\r\n",
					"from pyspark.sql.types import StructType,StructField, StringType, IntegerType\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"tablaUsuarios = spark.read \\\r\n",
					"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"        .option(\"url\", url) \\\r\n",
					"        .option(\"dbtable\", \"Usuarios\") \\\r\n",
					"        .option(\"user\", user) \\\r\n",
					"        .option(\"password\", password).load()\r\n",
					"\r\n",
					"tablaHoroscopos = spark.read \\\r\n",
					"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"        .option(\"url\", url) \\\r\n",
					"        .option(\"dbtable\", \"horoscopos\") \\\r\n",
					"        .option(\"user\", user) \\\r\n",
					"        .option(\"password\", password).load()\r\n",
					"\r\n",
					"tablaPaises = spark.read \\\r\n",
					"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"        .option(\"url\", url) \\\r\n",
					"        .option(\"dbtable\", \"paises\") \\\r\n",
					"        .option(\"user\", user) \\\r\n",
					"        .option(\"password\", password).load()\r\n",
					"\r\n",
					"tablaHoroscopos = tablaHoroscopos.withColumn(\"Desde\", split(tablaHoroscopos['Fecha_rango'], \" - \").getItem(0)).withColumn(\"Hasta\", split(tablaHoroscopos['Fecha_rango'], \" - \").getItem(1))\r\n",
					"\r\n",
					"tablaUsuarios.show()\r\n",
					"tablaHoroscopos.show()\r\n",
					"tablaPaises.show()\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\"\"\"Creacion tabla UsuariosHoroscopos\"\"\"\r\n",
					"emptyRDD = spark.sparkContext.emptyRDD()\r\n",
					"\r\n",
					"schema = StructType([\r\n",
					"   StructField(\"idUsuario\", StringType(), True),\r\n",
					"   StructField(\"Signo\", StringType(), True)])\r\n",
					"\r\n",
					"usuariosHoroscopos = spark.createDataFrame(emptyRDD, schema)\r\n",
					"\r\n",
					"for users in tablaUsuarios.collect():\r\n",
					"    idUsuario = users[\"id\"]\r\n",
					"    for horos in tablaHoroscopos.collect():\r\n",
					"        registro = users[\"registro\"]\r\n",
					"        if registro is not None:\r\n",
					"            registro = registro.split(',')[0]\r\n",
					"            registro = registro + \" 2022\"\r\n",
					"            registro = datetime.strptime(registro, \"%b %d %Y\")\r\n",
					"\r\n",
					"            desde = horos[\"Desde\"]\r\n",
					"            hasta =  horos[\"Hasta\"]\r\n",
					"            signo = horos[\"Signo\"]\r\n",
					"\r\n",
					"            desde = desde + \" 2022\"\r\n",
					"            hasta = hasta + \" 2022\"\r\n",
					"\r\n",
					"            desde = datetime.strptime(desde, \"%b %d %Y\")\r\n",
					"            hasta = datetime.strptime(hasta, \"%b %d %Y\")\r\n",
					"\r\n",
					"            if signo == \"capricorn\":\r\n",
					"                desde = datetime.strptime(horos[\"Desde\"] + \" 2021\", \"%b %d %Y\")\r\n",
					"                if registro >= datetime.strptime(\"2022-12-22\", \"%Y-%M-%d\"):\r\n",
					"                    registro = users[\"registro\"]\r\n",
					"                    registro = registro.split(',')[0]\r\n",
					"                    registro = datetime.strptime(registro + \" 2021\", \"%b %d %Y\")\r\n",
					"     \r\n",
					"            if desde <= registro <= hasta:\r\n",
					"                print (\"El usuario \"+idUsuario+\" con fecha de registró\")\r\n",
					"                print (registro)\r\n",
					"                print(\" está entre \")\r\n",
					"                print (desde)\r\n",
					"                print (hasta)\r\n",
					"                print(\" por tanto es \"+signo)\r\n",
					"\r\n",
					"                newRow = spark.createDataFrame([(idUsuario,signo)], [\"idUsuario\",\"Signo\"])\r\n",
					"                usuariosHoroscopos = usuariosHoroscopos.union(newRow)\r\n",
					"                print (\"\\n\")\r\n",
					"                break;    \r\n",
					"        else:\r\n",
					"            print (\"El usuario \" + idUsuario + \" no tiene fecha de registró por tanto es None\")\r\n",
					"            print (\"\\n\")\r\n",
					"            newRow = spark.createDataFrame([(idUsuario,\"NoSigno\")], [\"idUsuario\",\"Signo\"])\r\n",
					"            usuariosHoroscopos = usuariosHoroscopos.union(newRow)\r\n",
					"            break;\r\n",
					"\r\n",
					"try:\r\n",
					"    usuariosHoroscopos.write \\\r\n",
					"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"        .mode(\"overwrite\") \\\r\n",
					"        .option(\"url\", url) \\\r\n",
					"        .option(\"dbtable\", \"UsuariosHoroscopos\") \\\r\n",
					"        .option(\"user\", user) \\\r\n",
					"        .option(\"password\", password) \\\r\n",
					"        .save()\r\n",
					"except ValueError as error :\r\n",
					"    print(\"MSSQL Connector write failed\", error)\r\n",
					"\r\n",
					"print(\"MSSQL Connector write(overwrite) succeeded  \")\r\n",
					""
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}