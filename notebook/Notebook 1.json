{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark11",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b47574df-2c7f-447c-bdc0-0d59e6455a4c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f98c40cb-c627-4c43-9ac4-d10bb7b42e04/resourceGroups/RG_MASTER_OCT22_GROUP11/providers/Microsoft.Synapse/workspaces/synapsegrupo11/bigDataPools/spark11",
				"name": "spark11",
				"type": "Spark",
				"endpoint": "https://synapsegrupo11.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark11",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"spark.read.format(\"csv\").load(\"abfss://datalakegen2grupo11@f.campos.dfs.core.windows.net/userid-profile.tsv\").collect()"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"\r\n",
					"# Azure storage access info\r\n",
					"blob_account_name = 'r.cano' # replace with your blob name\r\n",
					"blob_container_name = 'datalakegen2grupo11' # replace with your container name\r\n",
					"blob_relative_path = 'Your path' # replace with your relative folder path\r\n",
					"linked_service_name = 'AzureBlobStorage1' # replace with your linked service name\r\n",
					"\r\n",
					"#abfss://datalakegen2grupo11@f.campos.dfs.core.windows.net/userid-profile.tsv\r\n",
					"\r\n",
					"blob_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(linked_service_name)\r\n",
					"\r\n",
					"# Allow SPARK to access from Blob remotely\r\n",
					"\r\n",
					"wasb_path = 'datalakegen2grupo11@r.cano.dfs.core.windows.net/userid-profile.tsv' # % (blob_container_name, blob_account_name, blob_relative_path)\r\n",
					"\r\n",
					"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name), blob_sas_token)\r\n",
					"print('Remote blob path: ' + wasb_path)\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.read.format(\"csv\").load(\"abfss://datalakegen2grupo11@r.cano.dfs.core.windows.net/userid-profile.tsv\").collect()\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs.ls('datalakegen2grupo11@r.cano.dfs.core.windows.net/')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"df = spark.read.load('abfss://datalakegen2grupo11@r.cano.dfs.core.windows.net/datalakegen2grupo11/userid-profile.csv', format='csv')\r\n",
					"display(df.limit(10))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs.ls('hola')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs.ls('/')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs.mkdirs('hola')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs.head('brutos/userid-profile.tsv', 500)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"COPY INTO Database1.usuarios\r\n",
					"FROM 'https://datalakegen2grupo11.blob.core.windows.net/datalakegen2grupo11/user/trusted-service-user/brutos/userid-profile.tsv' [,...n]\r\n",
					"WITH  \r\n",
					"(\r\n",
					"[FILE_TYPE = {'CSV'} ]\r\n",
					"[,FILE_FORMAT = EXTERNAL FILE FORMAT OBJECT ]    \r\n",
					"[,CREDENTIAL =(IDENTITY='Shared Access Signature', SECRET='sp=r&st=2022-11-10T15:26:31Z&se=2022-11-10T23:26:31Z&spr=https&sv=2021-06-08&sr=b&sig=gR9D7JYUKWnDvZqxedrCI3b6ND9tyhV4XYK0uW6eIaE%3D') ]\r\n",
					"[,FIRSTROW = 2]\r\n",
					"[,DATEFORMAT = 'date_format']\r\n",
					"[,ENCODING = {'UTF8'}]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"create external data source brutos\r\n",
					"with ( location = 'https://datalakegen2grupo11.blob.core.windows.net/datalakegen2grupo11/user/trusted-service-user/brutos' );\r\n",
					"\r\n",
					"select top 10 *\r\n",
					"from openrowset(\r\n",
					"        bulk 'userid-profile.tsv',\r\n",
					"        data_source = 'brutos',\r\n",
					"        format = 'csv',\r\n",
					"        parser_version ='2.0',\r\n",
					"        firstrow = 2\r\n",
					"    ) as rows"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"//scala\r\n",
					"%%spark\r\n",
					"//lectura de archivo tsv\r\n",
					"val df = spark.read.option(\"delimiter\",\"\\t\").option(\"header\",\"true\").csv(\"brutos/userid-profile.tsv\")\r\n",
					"//df.show\r\n",
					"val specificColumnsDf = df.select(\"id\", \"gender\", \"age\", \"country\", \"registered\") \r\n",
					"specificColumnsDf.show()\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"servername = \"jdbc:sqlserver://practicabigdata.database.windows.net:1433\"\r\n",
					"dbname = \"Practica\"\r\n",
					"url = servername + \";\" + \"databaseName=\" + dbname + \";\"\r\n",
					"dbtable = \"userid_profile\"\r\n",
					"user = \"practicabigdata\" \r\n",
					"password = \"BigData123\"\r\n",
					"\r\n",
					"try:\r\n",
					"  df = spark.read.option(\"delimiter\",\"\\t\").option(\"header\",\"true\").csv(\"brutos/userid-profile.tsv\")\r\n",
					"  df.write \\\r\n",
					"    .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"    .mode(\"overwrite\") \\\r\n",
					"    .option(\"url\", url) \\\r\n",
					"    .option(\"dbtable\", dbtable) \\\r\n",
					"    .option(\"user\", user) \\\r\n",
					"    .option(\"password\", password) \\\r\n",
					"    .save()\r\n",
					"except ValueError as error :\r\n",
					"    print(\"MSSQL Connector write failed\", error)\r\n",
					"\r\n",
					"print(\"MSSQL Connector write(overwrite) succeeded  \")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"%%pyspark\r\n",
					"\"\"\"configuracion de tabla maestra primer csv\"\"\"\r\n",
					"df = spark.read.option(\"delimiter\",\"\\t\").option(\"header\",\"true\").csv(\"brutos/userid-profile.tsv\")\r\n",
					"df = df.drop(\"gender\").drop(\"age\").withColumnRenamed(\"country\",\"pais\").withColumnRenamed(\"registered\",\"registro\")\r\n",
					"\r\n",
					"servername = \"jdbc:sqlserver://practicabigdata.database.windows.net:1433\"\r\n",
					"dbname = \"Practica\"\r\n",
					"url = servername + \";\" + \"databaseName=\" + dbname + \";\"\r\n",
					"dbtable = \"Usuarios\"\r\n",
					"user = \"practicabigdata\" \r\n",
					"password = \"BigData123\"\r\n",
					"\r\n",
					"try:\r\n",
					"  df.write \\\r\n",
					"    .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"    .mode(\"overwrite\") \\\r\n",
					"    .option(\"url\", url) \\\r\n",
					"    .option(\"dbtable\", dbtable) \\\r\n",
					"    .option(\"user\", user) \\\r\n",
					"    .option(\"password\", password) \\\r\n",
					"    .save()\r\n",
					"except ValueError as error :\r\n",
					"    print(\"MSSQL Connector write failed\", error)\r\n",
					"\r\n",
					"print(\"MSSQL Connector write(overwrite) succeeded  \")\r\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql.types import StructType,StructField, StringType, IntegerType\r\n",
					"\r\n",
					"\"\"\"configuracion de tabla maestra segundo csv\"\"\"    \r\n",
					"schema = StructType([ \\\r\n",
					"    StructField(\"id\",StringType(),True), \\\r\n",
					"    StructField(\"timestamp\",StringType(),True), \\\r\n",
					"    StructField(\"idArtista\",StringType(),True), \\\r\n",
					"    StructField(\"nombreArtista\", StringType(), True), \\\r\n",
					"    StructField(\"idCancion\", StringType(), True), \\\r\n",
					"    StructField(\"nombreCancion\", IntegerType(), True) \\\r\n",
					"  ])\r\n",
					"\r\n",
					"df = spark.read.schema(schema).option(\"delimiter\",\"\\t\").csv(\"brutos/userid-timestamp-artid-artname-traid-traname.tsv\")\r\n",
					"df = df.drop(\"timestamp\")\r\n",
					"\r\n",
					"dbtable = \"UsuariosCanciones\"\r\n",
					"\r\n",
					"try:\r\n",
					"  df.write \\\r\n",
					"    .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"    .mode(\"overwrite\") \\\r\n",
					"    .option(\"url\", url) \\\r\n",
					"    .option(\"dbtable\", dbtable) \\\r\n",
					"    .option(\"user\", user) \\\r\n",
					"    .option(\"password\", password) \\\r\n",
					"    .save()\r\n",
					"except ValueError as error :\r\n",
					"    print(\"MSSQL Connector write failed\", error)\r\n",
					"\r\n",
					"print(\"MSSQL Connector write(overwrite) succeeded  \")\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import split\r\n",
					"tablaHoroscopos = spark.read \\\r\n",
					"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"        .option(\"url\", url) \\\r\n",
					"        .option(\"dbtable\", \"horoscopos\") \\\r\n",
					"        .option(\"user\", user) \\\r\n",
					"        .option(\"password\", password).load()\r\n",
					"tablaHoroscopos = tablaHoroscopos.withColumn(\"Desde\", split(tablaHoroscopos['Fecha_rango'], \" - \").getItem(0)).withColumn(\"Hasta\", split(tablaHoroscopos['Fecha_rango'], \" - \").getItem(1))\r\n",
					"tablaHoroscopos = tablaHoroscopos.filter(to_date(data(\"Desde\").lt(\"Aug 13, 2006\"))).show()   \r\n",
					"\r\n",
					"data(\"Desde\").between(\"2015-07-05\", \"2015-09-02\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import StructType,StructField, StringType, IntegerType\r\n",
					"servername = \"jdbc:sqlserver://practicabigdata.database.windows.net:1433\"\r\n",
					"dbname = \"Practica\"\r\n",
					"url = servername + \";\" + \"databaseName=\" + dbname + \";\"\r\n",
					"dbtable = \"Usuarios\"\r\n",
					"user = \"practicabigdata\" \r\n",
					"password = \"BigData123\"\r\n",
					"\r\n",
					"\r\n",
					"\"\"\"Creacion Tabla UsuariosHoroscopo\"\"\"\r\n",
					"from pyspark.sql.functions import *\r\n",
					"tablaUsuarios = spark.read \\\r\n",
					"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"        .option(\"url\", url) \\\r\n",
					"        .option(\"dbtable\", \"Usuarios\") \\\r\n",
					"        .option(\"user\", user) \\\r\n",
					"        .option(\"password\", password).load()\r\n",
					"\r\n",
					"tablaHoroscopos = spark.read \\\r\n",
					"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"        .option(\"url\", url) \\\r\n",
					"        .option(\"dbtable\", \"horoscopos\") \\\r\n",
					"        .option(\"user\", user) \\\r\n",
					"        .option(\"password\", password).load()\r\n",
					"\r\n",
					"tablaHoroscopos = tablaHoroscopos.withColumn(\"Desde\", split(tablaHoroscopos['Fecha_rango'], \" - \").getItem(0)).withColumn(\"Hasta\", split(tablaHoroscopos['Fecha_rango'], \" - \").getItem(1))\r\n",
					"\r\n",
					"schema = StructType([\r\n",
					"   StructField(\"idUsuario\", StringType(), True),\r\n",
					"   StructField(\"horscopo\", StringType(), True)])\r\n",
					"\r\n",
					"usuariosHoroscopos = spark.createDataFrame([(\"0\",\"0\")], schema)\r\n",
					"\r\n",
					"\"\"\"tablaUsuarios.foreach( lambda x: \r\n",
					"\r\n",
					"    tablaHoroscopos.foreach( lambda y: \r\n",
					"        tablaUsuarios = tablaUsuarios.filter(to_date(x[\"registro\"]).between(x[\"Desde\"],x[\"Hasta\"])).show()  \r\n",
					"    )\r\n",
					"\r\n",
					")\r\n",
					"\"\"\"\r\n",
					"#tablaUsuarios = tablaUsuarios.collect() crea una lista\r\n",
					"tablaUsuarios.show()\r\n",
					"tablaHoroscopos.show()\r\n",
					"\"\"\"\r\n",
					"for x in tablaUsuarios:\r\n",
					"    to_date(x[\"registro\"],\"\").show()\r\n",
					"    for y in tablaHoroscopos:\r\n",
					"        tablaUsuarios = tablaUsuarios.filter(to_date(data(x[\"registro\"]).between(y[\"Desde\"],y[\"Hasta\"])).show()  \"\"\"\r\n",
					""
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from datetime import datetime\r\n",
					"\r\n",
					"emptyRDD = spark.sparkContext.emptyRDD()\r\n",
					"\r\n",
					"schema = StructType([\r\n",
					"   StructField(\"idUsuario\", StringType(), True),\r\n",
					"   StructField(\"signo\", StringType(), True)])\r\n",
					"\r\n",
					"usuariosHoroscopos = spark.createDataFrame(emptyRDD, schema)\r\n",
					"\r\n",
					"for users in tablaUsuarios.collect():\r\n",
					"    registro = users[\"registro\"]\r\n",
					"    idUsuario = users[\"id\"]\r\n",
					"    \r\n",
					"    if registro is not None:\r\n",
					"        registro = registro.split(',')[0]\r\n",
					"        registro = registro + \" 2022\"\r\n",
					"        registro = datetime.strptime(registro, \"%b %d %Y\")\r\n",
					"\r\n",
					"        for horos in tablaHoroscopos.collect():\r\n",
					"            desde = horos[\"Desde\"]\r\n",
					"            hasta =  horos[\"Hasta\"]\r\n",
					"            desde = desde + \" 2022\"\r\n",
					"            hasta = hasta + \" 2022\"\r\n",
					"\r\n",
					"            desde = datetime.strptime(desde, \"%b %d %Y\")\r\n",
					"            hasta = datetime.strptime(hasta, \"%b %d %Y\")\r\n",
					"\r\n",
					"            signo = horos[\"Signo\"]\r\n",
					"            print (idUsuario)\r\n",
					"            print (registro)\r\n",
					"            print (desde)\r\n",
					"            print (hasta)\r\n",
					"\r\n",
					"            if desde <= registro <= hasta:\r\n",
					"                print(\"in between\")\r\n",
					"\r\n",
					"                newRow = spark.createDataFrame([(idUsuario,signo)], [\"idUsuario\",\"signo\"])\r\n",
					"                usuariosHoroscopos = usuariosHoroscopos.union(newRow)\r\n",
					"                break;\r\n",
					"            else:\r\n",
					"                print(\"No!\")\r\n",
					"\r\n",
					"            print (\"\\n\")\r\n",
					"\r\n",
					"usuariosHoroscopos.show()\r\n",
					""
				],
				"execution_count": 123
			}
		]
	}
}