{
	"name": "Notebook 2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark11",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d54d5b75-8e92-433e-9bae-a0e1ac62ecfa"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f98c40cb-c627-4c43-9ac4-d10bb7b42e04/resourceGroups/RG_MASTER_OCT22_GROUP11/providers/Microsoft.Synapse/workspaces/synapsegrupo11/bigDataPools/spark11",
				"name": "spark11",
				"type": "Spark",
				"endpoint": "https://synapsegrupo11.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark11",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load('abfss://datalakegen2grupo11@datalakegen2grupo11.dfs.core.windows.net/user/trusted-service-user/brutos/userid-profile.tsv', format='csv', delimiter ='\\t'\r\n",
					"## If header exists uncomment line below\r\n",
					", header=True\r\n",
					")\r\n",
					"df.write.mode(\"overwrite\").saveAsTable(\"Database1.test01\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from datetime import datetime\r\n",
					"from pyspark.sql.types import StructType,StructField, StringType, IntegerType\r\n",
					"import pyspark.sql.functions as F\r\n",
					"import org.apache.spark.sql.functions.col\r\n",
					"\r\n",
					"servername = \"jdbc:sqlserver://practicabigdata.database.windows.net:1433\"\r\n",
					"dbname = \"Practica\"\r\n",
					"url = servername + \";\" + \"databaseName=\" + dbname + \";\"\r\n",
					"user = \"practicabigdata\" \r\n",
					"password = \"BigData123\"\r\n",
					"\r\n",
					"\r\n",
					"tablaUsuarios = spark.read \\\r\n",
					"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"        .option(\"url\", url) \\\r\n",
					"        .option(\"dbtable\", \"Usuarios\") \\\r\n",
					"        .option(\"user\", user) \\\r\n",
					"        .option(\"password\", password).load()\r\n",
					"\r\n",
					"tablaHoroscopos = spark.read \\\r\n",
					"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"        .option(\"url\", url) \\\r\n",
					"        .option(\"dbtable\", \"horoscopos\") \\\r\n",
					"        .option(\"user\", user) \\\r\n",
					"        .option(\"password\", password).load()\r\n",
					"\r\n",
					"tablaPaises = spark.read \\\r\n",
					"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"        .option(\"url\", url) \\\r\n",
					"        .option(\"dbtable\", \"paises\") \\\r\n",
					"        .option(\"user\", user) \\\r\n",
					"        .option(\"password\", password).load()\r\n",
					"\r\n",
					"tablaHoroscopos = tablaHoroscopos.withColumn(\"Desde\", split(tablaHoroscopos['Fecha_rango'], \" - \").getItem(0)).withColumn(\"Hasta\", split(tablaHoroscopos['Fecha_rango'], \" - \").getItem(1))\r\n",
					"emptyRDD = spark.sparkContext.emptyRDD()\r\n",
					"\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"idArtista\", StringType(), True),\r\n",
					"    StructField(\"idHoroscopo\", StringType(), True),\r\n",
					"    StructField(\"numEscuchas\", StringType(), True)])\r\n",
					"\r\n",
					"ArtistaHoroscopo = spark.createDataFrame(emptyRDD, schema)\r\n",
					"\r\n",
					"tablaUsuariosCanciones = spark.read \\\r\n",
					"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"        .option(\"url\", url) \\\r\n",
					"        .option(\"dbtable\", \"UsuariosCanciones\") \\\r\n",
					"        .option(\"user\", user) \\\r\n",
					"        .option(\"password\", password).load()\r\n",
					"\r\n",
					"tablaUsuarios.show()\r\n",
					"tablaHoroscopos.show()\r\n",
					"tablaPaises.show()\r\n",
					"tablaUsuariosCanciones.show()\r\n",
					"\r\n",
					"tablaUsuariosCanciones = tablaUsuariosCanciones.join(tablaHoroscopos,tablaUsuariosCanciones.id == tablaHoroscopos.idUsuario,\"inner\")\r\n",
					"tablaUsuariosCanciones.show(truncate=False)\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}