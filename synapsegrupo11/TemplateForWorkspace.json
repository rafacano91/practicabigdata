{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Nombre del Ã¡rea de trabajo",
			"defaultValue": "synapsegrupo11"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"connectionString\"de \"AzureBlobStorage1\""
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"connectionString\"de \"AzureSqlDatabase1\""
		},
		"AzureSynapseAnalytics1_connectionString": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"connectionString\"de \"AzureSynapseAnalytics1\""
		},
		"synapsegrupo11-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"connectionString\"de \"synapsegrupo11-WorkspaceDefaultSqlServer\""
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://practicabigdata.vault.azure.net/"
		},
		"synapsegrupo11-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datalakegen2grupo11.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/CopiaUsuariosTSV')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_cgk",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "datalakegen2grupo11/user/trusted-service-user/brutos/userid-profile.tsv"
							},
							{
								"name": "Destination",
								"value": "dbo.userid-profile"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {},
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "String"
										},
										"sink": {
											"name": "id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "gender",
											"type": "String"
										},
										"sink": {
											"name": "gender",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "age",
											"type": "String"
										},
										"sink": {
											"name": "age",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "country",
											"type": "String"
										},
										"sink": {
											"name": "country",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "registered",
											"type": "String"
										},
										"sink": {
											"name": "registered",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_cgk",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_cgk",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_cgk')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_cgk')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsegrupo11-WorkspaceDefaultSqlServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"DBName": "sqlDedicado"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"tableName": "dbo.userid-profile"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsegrupo11-WorkspaceDefaultSqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_cgk')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "userid-profile"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_cgk')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "userid-profile.tsv",
						"folderPath": "user/trusted-service-user/brutos",
						"container": "datalakegen2grupo11"
					},
					"columnDelimiter": "\t",
					"rowDelimiter": "\n",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "age",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "registered",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureKeyVault1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalytics1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapsegrupo11-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapsegrupo11-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapsegrupo11-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapsegrupo11-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Trigger_cgk')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CopiaUsuariosTSV",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2022-11-14T15:46:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/CopiaUsuariosTSV')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": true
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime1')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						},
						"copyComputeScaleProperties": {
							"dataIntegrationUnit": 16,
							"timeToLive": 5
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "COPY INTO [practicabigdatasqlbase].[dbo].[Usuarios]\nFROM 'https://datalakegen2grupo11.blob.core.windows.net/datalakegen2grupo11/user/trusted-service-user/brutos/userid-profile.tsv' \nWITH  \n(\nFILE_TYPE = 'CSV'      \n,CREDENTIAL =(IDENTITY='Shared Access Signature', SECRET='sp=r&st=2022-11-10T15:26:31Z&se=2022-11-10T23:26:31Z&spr=https&sv=2021-06-08&sr=b&sig=gR9D7JYUKWnDvZqxedrCI3b6ND9tyhV4XYK0uW6eIaE%3D') \n,FIRSTROW = 2\n,ENCODING = 'UTF8'\n,AUTO_CREATE_TABLE = 'ON')\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "practicabigdatasqlbase",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 10')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "/*CREATE EXTERNAL FILE FORMAT TSV\n       WITH (   FORMAT_TYPE = DELIMITEDTEXT,\n                FORMAT_OPTIONS (    FIELD_TERMINATOR = '\\t',\n                                    FIRST_ROW = 2  \n                                )\n            )\nGO\nCREATE EXTERNAL DATA SOURCE publicData\nWITH (    LOCATION   = 'https://datalakegen2grupo11.blob.core.windows.net/datalakegen2grupo11/user/trusted-service-user/brutos' )\nGO\n*/\n/*\nCREATE EXTERNAL TABLE dbo.userPublicData ( [id] VARCHAR (255) COLLATE Latin1_General_BIN2,\n\n    [gender] VARCHAR (255) COLLATE Latin1_General_BIN2,\n\n    [age] NUMERIC,\n\n    [country]  VARCHAR (255) COLLATE Latin1_General_BIN2,\n\n    [registered]  VARCHAR (255) COLLATE Latin1_General_BIN2 )\n\nWITH ( LOCATION = 'userid-profile.tsv',\n       DATA_SOURCE = [publicData],\n       FILE_FORMAT = [TSV] )\n*/\n\nCREATE EXTERNAL FILE FORMAT TSV2GB\n       WITH (   FORMAT_TYPE = DELIMITEDTEXT,\n                FORMAT_OPTIONS (    FIELD_TERMINATOR = '\\t',\n                                    FIRST_ROW = 1 \n                                )\n            )\n\n\n    ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "practicabigdatasqlbase",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 11')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [id]\n,[gender]\n,[age]\n,[country]\n,[registered]\n FROM [dbo].[userid_profile]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "practicabigdatasqlbase",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 12')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "--drop EXTERNAL table [dbo].[canciones_usuarios];\n--drop EXTERNAL FILE FORMAT TSV;\n\nCREATE EXTERNAL TABLE dbo.canciones_usuarios2 ( \n    \n    [ID] int PRIMARY KEY IDENTITY(1,1),\n\n    [UsuarioID] VARCHAR (255) ,\n\n    [FechaReproduccion] VARCHAR (255),\n\n    [ArtistaID]  VARCHAR (255),\n\n    [ArtistaNombre]  VARCHAR (255),\n\n    [CancionID]  VARCHAR (255),\n\n    [CancionNombre]  VARCHAR (255) )\n\nWITH ( LOCATION = 'userid-timestamp-artid-artname-traid-traname.tsv',\n       DATA_SOURCE = [publicData],\n       FILE_FORMAT = [TSV2GB] )\n\n       --crear un formato de archivo externo para que me acepte el tsv y formatee los datos al crear la tabla\nCREATE EXTERNAL FILE FORMAT TSV\n       WITH (   FORMAT_TYPE = DELIMITEDTEXT,\n                FORMAT_OPTIONS (    FIELD_TERMINATOR = '\\t',\n                                    FIRST_ROW = 2  \n                                )\n            )\n\n\n\n-- crear un origen de datos externo para que pueda acceder al fichero tsv\nCREATE EXTERNAL DATA SOURCE publicData\nWITH (    LOCATION   = 'https://datalakegen2grupo11.blob.core.windows.net/datalakegen2grupo11/user/trusted-service-user/brutos' )\n\n\n\n--crear una tabla externa desde un csv o tsv:\nCREATE EXTERNAL TABLE dbo.userPublicData ( [id] VARCHAR (255) COLLATE Latin1_General_BIN2,\n\n\n\n   [gender] VARCHAR (255) COLLATE Latin1_General_BIN2,\n\n\n\n   [age] NUMERIC,\n\n\n\n   [country]  VARCHAR (255) COLLATE Latin1_General_BIN2,\n\n\n\n   [registered]  VARCHAR (255) COLLATE Latin1_General_BIN2 )\n\n\n\nWITH ( LOCATION = 'userid-profile.tsv',\n       DATA_SOURCE = [publicData],\n       FILE_FORMAT = [TSV] )",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "practicabigdatasqlbase",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 13')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (10000000) \n--[ID]\n[UsuarioID]\n,[FechaReproduccion]\n,[ArtistaID]\n,[ArtistaNombre]\n,[CancionID]\n,[CancionNombre]\n FROM [dbo].[canciones_usuarios]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "practicabigdatasqlbase",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 14')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [id]\n,[gender]\n,[age]\n,[country]\n,[registered]\n FROM [dbo].[userid_profile]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "practicabigdatasqlbase",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 15')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (\n    SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'NYCTaxiTripSmall' AND O.TYPE = 'U' AND S.NAME = 'dbo')\nCREATE TABLE dbo.userid_profile_test\n    (\n     [id] VARCHAR (255) COLLATE Latin1_General_BIN2,\n\n    [gender] VARCHAR (255) COLLATE Latin1_General_BIN2,\n\n    [age] NUMERIC,\n\n    [country]  VARCHAR (255) COLLATE Latin1_General_BIN2,\n\n    [registered]  VARCHAR (255) COLLATE Latin1_General_BIN2 )\n\nWITH\n    (\n    DISTRIBUTION = ROUND_ROBIN,\n     CLUSTERED COLUMNSTORE INDEX\n     -- HEAP\n    )\nGO\n\nCOPY INTO dbo.NYCTaxiTripSmall\n(DateID 1, MedallionID 2, HackneyLicenseID 3, PickupTimeID 4, DropoffTimeID 5,\nPickupGeographyID 6, DropoffGeographyID 7, PickupLatitude 8, PickupLongitude 9, \nPickupLatLong 10, DropoffLatitude 11, DropoffLongitude 12, DropoffLatLong 13, \nPassengerCount 14, TripDurationSeconds 15, TripDistanceMiles 16, PaymentType 17, \nFareAmount 18, SurchargeAmount 19, TaxAmount 20, TipAmount 21, TollsAmount 22, \nTotalAmount 23)\nFROM 'https://contosolake.dfs.core.windows.net/users/NYCTripSmall.parquet'\nWITH\n(\n    FILE_TYPE = 'PARQUET'\n    ,MAXERRORS = 0\n    ,IDENTITY_INSERT = 'OFF'\n)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Database1",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 16')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Database1",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 17')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://datalakegen2grupo11.dfs.core.windows.net/datalakegen2grupo11/user/trusted-service-user/brutos/userid-profile.tsv',\n        FORMAT = 'CSV',\nâ¯â¯â¯â¯â¯â¯â¯â¯PARSER_VERSION = '2.0',\n        FIELDTERMINATOR ='\\t'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 19')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [id]\n,[gender]\n,[age]\n,[country]\n,[registered]\n FROM [default].[dbo].[test01]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "default",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Database1",
						"poolName": "Built-in"
					},
					"resultLimit": -1
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 20')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [id]\n,[gender]\n,[age]\n,[country]\n,[registered]\n FROM [dbo].[userid-profile]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sqlDedicado",
						"poolName": "sqlDedicado"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE EXTERNAL TABLE [practicabigdatasqlbase].[dbo].[Usuarios] (\n   [id] VARCHAR (255),\n    [gender] VARCHAR (255) ,\n    [age] NUMERIC,\n    [country]  VARCHAR (255) ,\n    [registered]  VARCHAR (255))\n    WITH\n    (\n    LOCATION = '/folder/file',\n    DATA_SOURCE = [DataSource1],\n    FILE_FORMAT = [FileFormat1]\n) \n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "practicabigdatasqlbase",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Database1",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 5')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [id]\n,[gender]\n,[age]\n,[country]\n,[registered]\n FROM [Database1].[dbo].[UsuariosPrueba]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Database1",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 6')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [id]\n,[gender]\n,[age]\n,[country]\n,[registered]\n FROM [Database1].[dbo].[Usuarios]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Database1",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 7')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE EXTERNAL DATA SOURCE SqlOnDemandDemo WITH (\n    LOCATION = 'https://datalakegen2grupo11.blob.core.windows.net',\n    CREDENTIAL = sqlondemand\n);\nGO\nCREATE EXTERNAL DATA SOURCE datalakegen2grupo11\nWITH ( LOCATION = 'https://datalakegen2grupo11.blob.core.windows.net/datalakegen2grupo11')\nGO\nCREATE EXTERNAL DATA SOURCE DeltaLakeStorage\nWITH ( location = 'https://datalakegen2grupo11.blob.core.windows.net/datalakegen2grupo11/user/trusted-service-user/brutos' );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "practicabigdatasqlbase",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 8')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://datalakegen2grupo11.blob.core.windows.net/datalakegen2grupo11/user/trusted-service-user/brutos/userid-profile.tsv',\n        FORMAT='CSV',\n        firstrow = 2\n    ) AS rows;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 9')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "create external data source brutos\nwith ( location = 'https://datalakegen2grupo11.blob.core.windows.net/datalakegen2grupo11/user/trusted-service-user/brutos' );\n\nselect top 10 *\nfrom openrowset(\n        bulk 'userid-profile.tsv',\n        data_source = 'brutos',\n        format = 'csv',\n        parser_version ='2.0',\n        firstrow = 2\n    ) as rows",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "practicabigdatasqlbase",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Comandos prueba')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "449a1856-6cd6-4da7-bf9a-048a7ca047a3"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"//scala\r\n",
							"%%spark\r\n",
							"//lectura de archivo tsv\r\n",
							"val df = spark.read.option(\"delimiter\",\"\\t\").option(\"header\",\"true\").csv(\"brutos/userid-profile.tsv\")\r\n",
							"//df.show\r\n",
							"val specificColumnsDf = df.select(\"id\", \"gender\", \"age\", \"country\", \"registered\") \r\n",
							"specificColumnsDf.show()\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"create external data source brutos\r\n",
							"with ( location = 'https://datalakegen2grupo11.blob.core.windows.net/datalakegen2grupo11/user/trusted-service-user/brutos' );\r\n",
							"\r\n",
							"select top 10 *\r\n",
							"from openrowset(\r\n",
							"        bulk 'userid-profile.tsv',\r\n",
							"        data_source = 'brutos',\r\n",
							"        format = 'csv',\r\n",
							"        parser_version ='2.0',\r\n",
							"        firstrow = 2\r\n",
							"    ) as rows"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"COPY INTO Database1.usuarios\r\n",
							"FROM 'https://datalakegen2grupo11.blob.core.windows.net/datalakegen2grupo11/user/trusted-service-user/brutos/userid-profile.tsv' [,...n]\r\n",
							"WITH  \r\n",
							"(\r\n",
							"[FILE_TYPE = {'CSV'} ]\r\n",
							"[,FILE_FORMAT = EXTERNAL FILE FORMAT OBJECT ]    \r\n",
							"[,CREDENTIAL =(IDENTITY='Shared Access Signature', SECRET='sp=r&st=2022-11-10T15:26:31Z&se=2022-11-10T23:26:31Z&spr=https&sv=2021-06-08&sr=b&sig=gR9D7JYUKWnDvZqxedrCI3b6ND9tyhV4XYK0uW6eIaE%3D') ]\r\n",
							"[,FIRSTROW = 2]\r\n",
							"[,DATEFORMAT = 'date_format']\r\n",
							"[,ENCODING = {'UTF8'}]"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.fs.ls('hola')\r\n",
							"mssparkutils.fs.ls('/')\r\n",
							"mssparkutils.fs.mkdirs('hola')\r\n",
							"mssparkutils.fs.head('brutos/userid-profile.tsv', 500)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark11",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "bdfbd45f-a02a-4696-a8ef-7ffbac13f937"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/f98c40cb-c627-4c43-9ac4-d10bb7b42e04/resourceGroups/RG_MASTER_OCT22_GROUP11/providers/Microsoft.Synapse/workspaces/synapsegrupo11/bigDataPools/spark11",
						"name": "spark11",
						"type": "Spark",
						"endpoint": "https://synapsegrupo11.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark11",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"\r\n",
							"# Azure storage access info\r\n",
							"blob_account_name = 'r.cano' # replace with your blob name\r\n",
							"blob_container_name = 'datalakegen2grupo11' # replace with your container name\r\n",
							"blob_relative_path = 'Your path' # replace with your relative folder path\r\n",
							"linked_service_name = 'AzureBlobStorage1' # replace with your linked service name\r\n",
							"servername = \"jdbc:sqlserver://practicabigdata.database.windows.net:1433\"\r\n",
							"dbname = \"Practica\"\r\n",
							"url = servername + \";\" + \"databaseName=\" + dbname + \";\"\r\n",
							"user = \"practicabigdata\" \r\n",
							"password = \"BigData123\"\r\n",
							"\r\n",
							"#abfss://datalakegen2grupo11@f.campos.dfs.core.windows.net/userid-profile.tsv\r\n",
							"\r\n",
							"blob_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(linked_service_name)\r\n",
							"\r\n",
							"# Allow SPARK to access from Blob remotely\r\n",
							"\r\n",
							"wasb_path = 'datalakegen2grupo11@r.cano.dfs.core.windows.net/userid-profile.tsv' # % (blob_container_name, blob_account_name, blob_relative_path)\r\n",
							"\r\n",
							"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name), blob_sas_token)\r\n",
							"print('Remote blob path: ' + wasb_path)\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"%%pyspark\r\n",
							"\"\"\"configuracion de tabla maestra primer csv\"\"\"\r\n",
							"df = spark.read.option(\"delimiter\",\"\\t\").option(\"header\",\"true\").csv(\"brutos/userid-profile.tsv\")\r\n",
							"df = df.drop(\"gender\").drop(\"age\").withColumnRenamed(\"country\",\"pais\").withColumnRenamed(\"registered\",\"registro\")\r\n",
							"\r\n",
							"dbtable = \"Usuarios\"\r\n",
							"\r\n",
							"try:\r\n",
							"  df.write \\\r\n",
							"    .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"    .mode(\"overwrite\") \\\r\n",
							"    .option(\"url\", url) \\\r\n",
							"    .option(\"dbtable\", dbtable) \\\r\n",
							"    .option(\"user\", user) \\\r\n",
							"    .option(\"password\", password) \\\r\n",
							"    .save()\r\n",
							"except ValueError as error :\r\n",
							"    print(\"MSSQL Connector write failed\", error)\r\n",
							"\r\n",
							"print(\"MSSQL Connector write(overwrite) succeeded  \")\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"from pyspark.sql.types import StructType,StructField, StringType, IntegerType\r\n",
							"\r\n",
							"\"\"\"configuracion de tabla maestra segundo csv\"\"\"    \r\n",
							"schema = StructType([ \\\r\n",
							"    StructField(\"id\",StringType(),True), \\\r\n",
							"    StructField(\"timestamp\",StringType(),True), \\\r\n",
							"    StructField(\"idArtista\",StringType(),True), \\\r\n",
							"    StructField(\"nombreArtista\", StringType(), True), \\\r\n",
							"    StructField(\"idCancion\", StringType(), True), \\\r\n",
							"    StructField(\"nombreCancion\", IntegerType(), True) \\\r\n",
							"  ])\r\n",
							"\r\n",
							"df = spark.read.schema(schema).option(\"delimiter\",\"\\t\").csv(\"brutos/userid-timestamp-artid-artname-traid-traname.tsv\")\r\n",
							"df = df.drop(\"timestamp\")\r\n",
							"\r\n",
							"dbtable = \"UsuariosCanciones\"\r\n",
							"\r\n",
							"try:\r\n",
							"  df.write \\\r\n",
							"    .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"    .mode(\"overwrite\") \\\r\n",
							"    .option(\"url\", url) \\\r\n",
							"    .option(\"dbtable\", dbtable) \\\r\n",
							"    .option(\"user\", user) \\\r\n",
							"    .option(\"password\", password) \\\r\n",
							"    .save()\r\n",
							"except ValueError as error :\r\n",
							"    print(\"MSSQL Connector write failed\", error)\r\n",
							"\r\n",
							"print(\"MSSQL Connector write(overwrite) succeeded  \")\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\"\"\"Modificacion y almancenamiento tablas: horoscopos, usuarios y paises para manejo en spark\"\"\"\r\n",
							"from datetime import datetime\r\n",
							"from pyspark.sql.types import StructType,StructField, StringType, IntegerType\r\n",
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"tablaUsuarios = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"Usuarios\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"tablaHoroscopos = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"horoscopos\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"tablaPaises = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"paises\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"tablaHoroscopos = tablaHoroscopos.withColumn(\"Desde\", split(tablaHoroscopos['Fecha_rango'], \" - \").getItem(0)).withColumn(\"Hasta\", split(tablaHoroscopos['Fecha_rango'], \" - \").getItem(1))\r\n",
							"\r\n",
							"tablaUsuarios.show()\r\n",
							"tablaHoroscopos.show()\r\n",
							"tablaPaises.show()\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\"\"\"Creacion tabla UsuariosHoroscopos\"\"\"\r\n",
							"emptyRDD = spark.sparkContext.emptyRDD()\r\n",
							"\r\n",
							"schema = StructType([\r\n",
							"   StructField(\"idUsuario\", StringType(), True),\r\n",
							"   StructField(\"Signo\", StringType(), True)])\r\n",
							"\r\n",
							"usuariosHoroscopos = spark.createDataFrame(emptyRDD, schema)\r\n",
							"\r\n",
							"for users in tablaUsuarios.collect():\r\n",
							"    idUsuario = users[\"id\"]\r\n",
							"    for horos in tablaHoroscopos.collect():\r\n",
							"        registro = users[\"registro\"]\r\n",
							"        if registro is not None:\r\n",
							"            registro = registro.split(',')[0]\r\n",
							"            registro = registro + \" 2022\"\r\n",
							"            registro = datetime.strptime(registro, \"%b %d %Y\")\r\n",
							"\r\n",
							"            desde = horos[\"Desde\"]\r\n",
							"            hasta =  horos[\"Hasta\"]\r\n",
							"            signo = horos[\"Signo\"]\r\n",
							"\r\n",
							"            desde = desde + \" 2022\"\r\n",
							"            hasta = hasta + \" 2022\"\r\n",
							"\r\n",
							"            desde = datetime.strptime(desde, \"%b %d %Y\")\r\n",
							"            hasta = datetime.strptime(hasta, \"%b %d %Y\")\r\n",
							"\r\n",
							"            if signo == \"capricorn\":\r\n",
							"                desde = datetime.strptime(horos[\"Desde\"] + \" 2021\", \"%b %d %Y\")\r\n",
							"                if registro >= datetime.strptime(\"2022-12-22\", \"%Y-%M-%d\"):\r\n",
							"                    registro = users[\"registro\"]\r\n",
							"                    registro = registro.split(',')[0]\r\n",
							"                    registro = datetime.strptime(registro + \" 2021\", \"%b %d %Y\")\r\n",
							"     \r\n",
							"            if desde <= registro <= hasta:\r\n",
							"                print (\"El usuario \"+idUsuario+\" con fecha de registrÃ³\")\r\n",
							"                print (registro)\r\n",
							"                print(\" estÃ¡ entre \")\r\n",
							"                print (desde)\r\n",
							"                print (hasta)\r\n",
							"                print(\" por tanto es \"+signo)\r\n",
							"\r\n",
							"                newRow = spark.createDataFrame([(idUsuario,signo)], [\"idUsuario\",\"Signo\"])\r\n",
							"                usuariosHoroscopos = usuariosHoroscopos.union(newRow)\r\n",
							"                print (\"\\n\")\r\n",
							"                break;    \r\n",
							"        else:\r\n",
							"            print (\"El usuario \" + idUsuario + \" no tiene fecha de registrÃ³ por tanto es None\")\r\n",
							"            print (\"\\n\")\r\n",
							"            newRow = spark.createDataFrame([(idUsuario,\"NoSigno\")], [\"idUsuario\",\"Signo\"])\r\n",
							"            usuariosHoroscopos = usuariosHoroscopos.union(newRow)\r\n",
							"            break;\r\n",
							"\r\n",
							"try:\r\n",
							"    usuariosHoroscopos.write \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .mode(\"overwrite\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"UsuariosHoroscopos\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password) \\\r\n",
							"        .save()\r\n",
							"except ValueError as error :\r\n",
							"    print(\"MSSQL Connector write failed\", error)\r\n",
							"\r\n",
							"print(\"MSSQL Connector write(overwrite) succeeded  \")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark11",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2115bebd-b623-4205-887c-8b0e4bf1cd5b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/f98c40cb-c627-4c43-9ac4-d10bb7b42e04/resourceGroups/RG_MASTER_OCT22_GROUP11/providers/Microsoft.Synapse/workspaces/synapsegrupo11/bigDataPools/spark11",
						"name": "spark11",
						"type": "Spark",
						"endpoint": "https://synapsegrupo11.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark11",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"from datetime import datetime\r\n",
							"\r\n",
							"from pyspark.sql.types import StructType,StructField, StringType, IntegerType\r\n",
							"\r\n",
							"#from pyspark.sql.functions import col\r\n",
							"import pyspark.sql.functions as F\r\n",
							"\r\n",
							"servername = \"jdbc:sqlserver://practicabigdata.database.windows.net:1433\"\r\n",
							"\r\n",
							"dbname = \"Practica\"\r\n",
							"\r\n",
							"url = servername + \";\" + \"databaseName=\" + dbname + \";\"\r\n",
							"\r\n",
							"user = \"practicabigdata\" \r\n",
							"\r\n",
							"password = \"BigData123\"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"tablaUsuarios = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"Usuarios\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"tablaHoroscopos = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"horoscopos\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"tablaPaises = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"paises\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"tablaUsuarios.show()\r\n",
							"\r\n",
							"tablaHoroscopos.show()\r\n",
							"\r\n",
							"tablaPaises.show()\r\n",
							"\r\n",
							"tablaUsuarios = tablaUsuarios.withColumnRenamed(\"id\",\"idUsuario\")\r\n",
							"tablaPaises = tablaPaises.withColumnRenamed(\"ID\",\"idPaisContinente\")\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"tablaUsuarios= tablaUsuarios.alias('a').join(tablaPaises.alias('b'),F.expr(\"a.pais like concat('%',b.nombre,'%') or b.nombre like concat('%',a.pais,'%')\"),\"left\")\r\n",
							"#tablaUsuarios= tablaUsuarios.alias('a').join(tablaPaises.alias('b'),F.expr(\"b.nombre like concat('%',a.pais,'%')\"),\"left\")\r\n",
							"tablaUsuarios.show()\r\n",
							"tablaUsuarios = tablaUsuarios.drop(\"Nombre\").drop(\"Continente\").drop(\"pais\").drop(\"registro\")\r\n",
							"\r\n",
							"tablaUsuarios.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#crear tabla UsuarioPaisContinente\r\n",
							"try:\r\n",
							"\r\n",
							"    tablaUsuarios.write \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .mode(\"overwrite\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"UsuarioPaisContinente\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password) \\\r\n",
							"        .save()\r\n",
							"\r\n",
							"except ValueError as error :\r\n",
							"\r\n",
							"    print(\"MSSQL Connector write failed\", error)\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"print(\"MSSQL Connector write(overwrite) succeeded  \")"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\"\"\" --Se necesita saber cuÃ¡ntos usuarios por paÃ­s pertenecen a cada signo del horÃ³scopo\r\n",
							"select count(*) as users, p.nombre, uh.signo\r\n",
							"from Usuarios u, dbo.paises p, dbo.UsuariosHoroscopos uh\r\n",
							"where \tu.pais = p.nombre \r\n",
							"\t\tand u.id = uh.idUsuario\r\n",
							"\t\tand u.pais = p.nombre\r\n",
							"group by p.nombre, uh.signo\r\n",
							"order by p.nombre\r\n",
							"; \r\n",
							"\r\n",
							"select count(*) as users, p.nombre, uh.signo\r\n",
							"from    dbo.UsuariosHoroscopos uh inner join dbo.Usuarios u on u.id = uh.idUsuario\r\n",
							"        inner join dbo.paises p on u.pais = p.nombre \r\n",
							"group by p.nombre, uh.signo\r\n",
							"order by p.nombre\r\n",
							"\r\n",
							"\"\"\"\r\n",
							"from pyspark.sql import SparkSession\r\n",
							"\r\n",
							"tablaUsuarios = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"Usuarios\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"tablaPaises = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"paises\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"tablaUsuariosHoroscopos = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"UsuariosHoroscopos\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"#tablaUsuarioPaisHoroscopo= tablaUsuariosHoroscopos.alias('uh').join(tablaUsuarios.alias('u').join(tablaPaises.alias('b')))\r\n",
							"\r\n",
							"#tablaUsuarioPaisHoroscopo.show()\r\n",
							"\r\n",
							"\r\n",
							"######\r\n",
							"#tablaUsuarioPaisHoroscopo.drop(\"Nombre\").drop(\"Continente\").drop(\"pais\").drop(\"registro\")\r\n",
							"\r\n",
							"tablaUsuarios.createOrReplaceTempView(\"tablaUsuarios\")\r\n",
							"tablaPaises.createOrReplaceTempView(\"tablaPaises\")\r\n",
							"tablaUsuariosHoroscopos.createOrReplaceTempView(\"tablaUsuariosHoroscopos\")\r\n",
							"\r\n",
							"#tablaUsuarioPaisHoroscopo2 = spark.sql(\"select count(*) as users, p.nombre, uh.signo from tablaUsuariosHoroscopos uh inner join tablaUsuarios u on u.id = uh.idUsuario inner join tablaPaises p on u.pais = p.nombre group by p.nombre, uh.signo order by p.nombre \");\r\n",
							"\r\n",
							"tablaUsuarioPaisHoroscopo2 = spark.sql(\"select count(*) as users, p.nombre, uh.signo from tablaUsuariosHoroscopos uh, tablaUsuarios u, tablaPaises p where uh.idUsuario = u.id and u.pais = p.nombre group by p.nombre, uh.signo order by p.nombre\")\r\n",
							"#spark.sql(\"select count(*) as users, p.nombre, uh.signo from dbo.Usuarios u, dbo.paises p, dbo.UsuariosHoroscopos uh where u.pais = p.nombre and u.id = uh.idUsuario and u.pais = p.nombre group by p.nombre, uh.signo order by p.nombre\").show()\r\n",
							"\r\n",
							"tablaUsuarioPaisHoroscopo2.show()\r\n",
							"##########\r\n",
							"\r\n",
							"\"\"\"\r\n",
							"tablaUsuarioPaisHoroscopo.createOrReplaceTempView(\"tablaUsuarioPaisHoroscopo\")\r\n",
							"tablaUsuarioPaisHoroscopo = spark.sql(\"select count(*) as users, nombre, signo from tablaUsuarioPaisHoroscopo group by nombre, signo order by nombre\")\r\n",
							"tablaUsuarioPaisHoroscopo.show()\r\n",
							"\"\"\""
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#crear tabla UsuarioPaisHoroscopo\r\n",
							"try:\r\n",
							"\r\n",
							"    tablaUsuarioPaisHoroscopo2.write \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .mode(\"overwrite\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"UsuarioPaisHoroscopo\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password) \\\r\n",
							"        .save()\r\n",
							"\r\n",
							"except ValueError as error :\r\n",
							"\r\n",
							"    print(\"MSSQL Connector write failed\", error)\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"print(\"MSSQL Connector write(overwrite) succeeded  \")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\"\"\" --cuÃ¡l es el signo que tiene mÃ¡s usuarios a nivel mundial \r\n",
							"select top(1) count(*) as users, uh.signo\r\n",
							"from    dbo.UsuariosHoroscopos uh inner join dbo.Usuarios u on u.id = uh.idUsuario        \r\n",
							"group by  uh.signo\r\n",
							"order by users desc\r\n",
							"\"\"\"\r\n",
							"tablaUsuarios = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"Usuarios\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"tablaUsuariosHoroscopos = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"UsuariosHoroscopos\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"\r\n",
							"tablaUsuarios.createOrReplaceTempView(\"tablaUsuarios\")\r\n",
							"tablaUsuariosHoroscopos.createOrReplaceTempView(\"tablaUsuariosHoroscopos\")\r\n",
							"\r\n",
							"tablaHoroscopoMasUsado = spark.sql(\"select count(*) as users, uh.signo from tablaUsuariosHoroscopos uh inner join tablaUsuarios u on u.id = uh.idUsuario group by uh.signo order by users desc limit 1\")\r\n",
							"\r\n",
							"tablaHoroscopoMasUsado.show()"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#crear tabla HoroscopoMasUsado\r\n",
							"try:\r\n",
							"\r\n",
							"    tablaHoroscopoMasUsado.write \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .mode(\"overwrite\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"HoroscopoMasUsado\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password) \\\r\n",
							"        .save()\r\n",
							"\r\n",
							"except ValueError as error :\r\n",
							"\r\n",
							"    print(\"MSSQL Connector write failed\", error)\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"print(\"MSSQL Connector write(overwrite) succeeded  \")"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\"\"\"\r\n",
							"select top(1) count(*) as reproducciones, uc.nombreArtista, uh.signo\r\n",
							"from dbo.UsuariosHoroscopos uh inner join dbo.Usuarios u on u.id = uh.idUsuario \r\n",
							"    inner join dbo.UsuariosCanciones uc on u.id = uc.id\r\n",
							"WHERE uh.signo = (select signo from dbo.HoroscopoMasUsado)\r\n",
							"group by  uc.nombreArtista, uh.signo\r\n",
							"order by reproducciones desc\r\n",
							"--limit 1 en payspark en vez de top\r\n",
							"\r\n",
							"\"\"\"\r\n",
							"tablaUsuarios = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"Usuarios\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"tablaUsuariosHoroscopos = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"UsuariosHoroscopos\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"tablaUsuariosCanciones = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"UsuariosCanciones\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"tablaHoroscopoMasUsado = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"HoroscopoMasUsado\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"\r\n",
							"tablaUsuarios.createOrReplaceTempView(\"Usuarios\")\r\n",
							"tablaUsuariosHoroscopos.createOrReplaceTempView(\"UsuariosHoroscopos\")\r\n",
							"tablaUsuariosCanciones.createOrReplaceTempView(\"UsuariosCanciones\")\r\n",
							"tablaHoroscopoMasUsado.createOrReplaceTempView(\"HoroscopoMasUsado\")\r\n",
							"\r\n",
							"tablaArtistaMasEscuchado = spark.sql(\"select count(*) as reproducciones, uc.nombreArtista, uh.signo from UsuariosHoroscopos uh inner join Usuarios u on u.id = uh.idUsuario inner join UsuariosCanciones uc on u.id = uc.id WHERE uh.signo = (select signo from HoroscopoMasUsado) group by  uc.nombreArtista, uh.signo order by reproducciones desc limit 1\")\r\n",
							"\r\n",
							"tablaArtistaMasEscuchado.show()\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#crear tabla ArtistaMasEscuchado\r\n",
							"try:\r\n",
							"\r\n",
							"    tablaArtistaMasEscuchado.write \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .mode(\"overwrite\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"ArtistaMasEscuchado\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password) \\\r\n",
							"        .save()\r\n",
							"\r\n",
							"except ValueError as error :\r\n",
							"\r\n",
							"    print(\"MSSQL Connector write failed\", error)\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"print(\"MSSQL Connector write(overwrite) succeeded  \")"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\"\"\"\r\n",
							"--\tÂ¿En quÃ© continente deberÃ­an publicitar mÃ¡s la aplicaciÃ³n?  \r\n",
							"-- reproducciones por pais y continente\r\n",
							"select count(*) as reproducciones, p.nombre, p.Continente\r\n",
							"from dbo.paises p inner join dbo.Usuarios u on p.nombre = u.pais inner join dbo.UsuariosCanciones uc on u.id = uc.id \r\n",
							"group by  p.nombre, p.Continente\r\n",
							"order by reproducciones desc\r\n",
							"\"\"\"\r\n",
							"tablaUsuarios = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"Usuarios\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"tablaPaises = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"paises\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"tablaUsuariosCanciones = spark.read \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"UsuariosCanciones\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password).load()\r\n",
							"\r\n",
							"tablaUsuarios.createOrReplaceTempView(\"Usuarios\")\r\n",
							"tablaUsuariosCanciones.createOrReplaceTempView(\"UsuariosCanciones\")\r\n",
							"tablaPaises.createOrReplaceTempView(\"paises\")\r\n",
							"\r\n",
							"tablaReproPaisContinente = spark.sql(\"select count(*) as reproducciones, p.nombre, p.Continente from paises p inner join Usuarios u on p.nombre = u.pais inner join UsuariosCanciones uc on u.id = uc.id group by  p.nombre, p.Continente order by reproducciones asc\")\r\n",
							"\r\n",
							"tablaReproPaisContinente.show()\r\n",
							"\r\n",
							"\"\"\"\r\n",
							"-- reproducciones por continente\r\n",
							"select count(*) as reproducciones, p.Continente\r\n",
							"from dbo.paises p inner join dbo.Usuarios u on p.nombre = u.pais inner join dbo.UsuariosCanciones uc on u.id = uc.id \r\n",
							"group by  p.Continente\r\n",
							"order by reproducciones asc\r\n",
							"\"\"\"\r\n",
							"\r\n",
							"tablaReproContinente = spark.sql(\"select count(*) as reproducciones, p.Continente from paises p inner join Usuarios u on p.nombre = u.pais inner join UsuariosCanciones uc on u.id = uc.id group by  p.Continente order by reproducciones asc\")\r\n",
							"\r\n",
							"tablaReproContinente.show()\r\n",
							"\r\n",
							"\"\"\"\r\n",
							"--Â¿Hay algÃºn continente que falte? \r\n",
							"-- falta el continente de British Indian Ocean Territory y el de Antarctica\r\n",
							"\r\n",
							"select count(*) as reproducciones, p.nombre, p.Continente\r\n",
							"from dbo.paises p inner join dbo.Usuarios u on p.nombre = u.pais inner join dbo.UsuariosCanciones uc on u.id = uc.id \r\n",
							"where p.Continente is null\r\n",
							"group by  p.nombre, p.Continente\r\n",
							"order by reproducciones asc\r\n",
							"\"\"\"\r\n",
							"\r\n",
							"tablaContinentesNull = spark.sql(\"select count(*) as reproducciones, p.nombre, p.Continente from paises p inner join Usuarios u on p.nombre = u.pais inner join UsuariosCanciones uc on u.id = uc.id where p.Continente is null group by p.nombre, p.Continente order by reproducciones asc\")\r\n",
							"\r\n",
							"tablaContinentesNull.show()\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#crear tabla ReproPaisContinente\r\n",
							"#crear tabla ReproContinente\r\n",
							"#crear tabla ContinentesNull\r\n",
							"try:\r\n",
							"\r\n",
							"    tablaReproPaisContinente.write \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .mode(\"overwrite\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"ReproPaisContinente\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password) \\\r\n",
							"        .save()\r\n",
							"    \r\n",
							"    tablaReproContinente.write \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .mode(\"overwrite\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"ReproContinente\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password) \\\r\n",
							"        .save()\r\n",
							"    \r\n",
							"    tablaContinentesNull.write \\\r\n",
							"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"        .mode(\"overwrite\") \\\r\n",
							"        .option(\"url\", url) \\\r\n",
							"        .option(\"dbtable\", \"ContinentesNull\") \\\r\n",
							"        .option(\"user\", user) \\\r\n",
							"        .option(\"password\", password) \\\r\n",
							"        .save()\r\n",
							"\r\n",
							"except ValueError as error :\r\n",
							"\r\n",
							"    print(\"MSSQL Connector write failed\", error)\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"print(\"MSSQL Connector write(overwrite) succeeded  \")"
						],
						"outputs": [],
						"execution_count": 8
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Database1')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Database1",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://datalakegen2grupo11@datalakegen2grupo11.dfs.core.windows.net/Database1",
								"Properties": {
									"FormatType": "csv",
									"LinkedServiceName": "synapsegrupo11-WorkspaceDefaultStorage"
								}
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Prueba2",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "Database1"
							},
							"Description": "",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "id",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "gender",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "age",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "country",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "registered",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://datalakegen2grupo11@datalakegen2grupo11.dfs.core.windows.net/user/trusted-service-user/brutos/userid-profile.tsv",
										"delimiter": "\t",
										"firstRowAsHeader": "true",
										"multiLine": "false",
										"serialization.format": "1",
										"FormatTypeSetToDatabaseDefault": false,
										"header": "true"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://datalakegen2grupo11@datalakegen2grupo11.dfs.core.windows.net/user/trusted-service-user/brutos/userid-profile.tsv",
									"Properties": {
										"LinkedServiceName": "synapsegrupo11-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": "\t",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "",
								"spark.sql.sources.provider": "csv"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Usuarios",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "Database1"
							},
							"Description": "",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "id",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "gender",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "age",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "country",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "registered",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://datalakegen2grupo11@datalakegen2grupo11.dfs.core.windows.net/user/trusted-service-user/brutos/userid-profile.tsv",
										"delimiter": "\t",
										"firstRowAsHeader": "true",
										"multiLine": "false",
										"serialization.format": "1",
										"FormatTypeSetToDatabaseDefault": false,
										"header": "true"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://datalakegen2grupo11@datalakegen2grupo11.dfs.core.windows.net/user/trusted-service-user/brutos/userid-profile.tsv",
									"Properties": {
										"LinkedServiceName": "synapsegrupo11-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": "\t",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "",
								"spark.sql.sources.provider": "csv"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "UsuariosPrueba",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "Database1"
							},
							"Description": "",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "id",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "gender",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "age",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "country",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "registered",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://datalakegen2grupo11@datalakegen2grupo11.dfs.core.windows.net/user/trusted-service-user/brutos/userid-profile.tsv",
										"delimiter": "\t",
										"firstRowAsHeader": "true",
										"multiLine": "false",
										"serialization.format": "1",
										"FormatTypeSetToDatabaseDefault": false,
										"header": "true"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://datalakegen2grupo11@datalakegen2grupo11.dfs.core.windows.net/user/trusted-service-user/brutos/userid-profile.tsv",
									"Properties": {
										"LinkedServiceName": "synapsegrupo11-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": "\t",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "",
								"spark.sql.sources.provider": "csv"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlDedicado')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spark11')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/grupo112')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 20,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Large",
				"nodeSizeFamily": "HardwareAcceleratedGPU",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/AzureFileStorage764')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/f98c40cb-c627-4c43-9ac4-d10bb7b42e04/resourceGroups/RG_MASTER_OCT22_GROUP11/providers/Microsoft.Storage/storageAccounts/datalakegen2grupo11",
				"groupId": "file",
				"fqdns": [
					"datalakegen2grupo11.file.core.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-custstgacct--synapsegrupo11-datalakegen2grupo11')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/f98c40cb-c627-4c43-9ac4-d10bb7b42e04/resourceGroups/RG_MASTER_OCT22_GROUP11/providers/Microsoft.Storage/storageAccounts/datalakegen2grupo11",
				"groupId": "dfs"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sql--synapsegrupo11')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/f98c40cb-c627-4c43-9ac4-d10bb7b42e04/resourceGroups/RG_MASTER_OCT22_GROUP11/providers/Microsoft.Synapse/workspaces/synapsegrupo11",
				"groupId": "sql",
				"fqdns": [
					"synapsegrupo11.96d7135e-c42b-4552-9a61-a67f7902c7f7.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sqlOnDemand--synapsegrupo11')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/f98c40cb-c627-4c43-9ac4-d10bb7b42e04/resourceGroups/RG_MASTER_OCT22_GROUP11/providers/Microsoft.Synapse/workspaces/synapsegrupo11",
				"groupId": "sqlOnDemand",
				"fqdns": [
					"synapsegrupo11-ondemand.96d7135e-c42b-4552-9a61-a67f7902c7f7.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}